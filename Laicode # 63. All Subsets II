// Hard
//
// Given a set of characters represented by a String, return a list containing all subsets of the characters. 
// Notice that each subset returned will be sorted to remove the sequence.
//
//
// Assumptions
//   Â· There could be duplicate characters in the original set.
//
// Examples
//
//  Set = "abc", all the subsets are ["", "a", "ab", "abc", "ac", "b", "bc", "c"]
//  Set = "abb", all the subsets are ["", "a", "ab", "abb", "b", "bb"]
//  Set = "abab", all the subsets are ["", "a", "aa","aab", "aabb", "ab","abb","b", "bb"]
//  Set = "", all the subsets are [""]
//  Set = null, all the subsets are []
//
// solution
public List<String> subSets(String set) {
  List<String> res = new ArrayList<>();
  
  // corner case
  if (set == null) {
    return res;
  }
  
  char[] array = set.toCharArray();
  Arrays.sort(array);
  StringBuilder sb = new StringBuilder();
  dfs(res, sb, 0, array);
  return res;
}

private void dfs(List<String> res, StringBuilder sb, int index, char[] set) {
  if (index == set.length) {
    res.add(sb.toString());
    return;
  }
  
  dfs(res, sb.append(set[index]), index + 1, set);
  sb.deleteCharAt(sb.length() - 1);
  
  while (index < set.length - 1 && set[index] == set[index + 1]) {
    index++;
  }
  
  dfs(res, sb, index + 1, set);
}
